using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DecoratorGenerator
{
    [Generator]
    public class Main : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context) {
            var types = GetAllDecoratedTypes(context.Compilation.Assembly.GlobalNamespace);

            var wrapperSymbolWithoutNamespace = context.Compilation.Assembly.GetTypeByMetadataName("WrapperList");
            var wrapperListTypes =
                (wrapperSymbolWithoutNamespace == null)
                ? GetAllTypes(context.Compilation.Assembly.GlobalNamespace, x => x.Name == "WrapperList")
                : new[] { wrapperSymbolWithoutNamespace };
            var thirdPartyTypes =
                wrapperListTypes.SelectMany(x => x.GetMembers()
                .Where(m => m.Name != ".ctor")
                .Select(m => m as IFieldSymbol)
                .Select(f => f.Type)
                .Select(t => t as INamedTypeSymbol));

            types = types.Concat(thirdPartyTypes);

            var outputs = types.Select(type => {
                var className = $"{type.Name.Substring(1)}Decorator";
                var @interface = type;
                var targetFieldName = $@"{char.ToLower(@interface.Name[1])}{@interface.Name.Substring(2)}";
                var ancestorInterfaces = type.AllInterfaces;
                var ancestorMembers = ancestorInterfaces.SelectMany(a => a.GetMembers());
                var members = @interface.GetMembers().Concat(ancestorMembers);
                var displayMethods = CreateDisplayMethods(targetFieldName, members);
                var displayProperties = CreateDisplayProperties(targetFieldName, members);
                var formattedDisplayMethods = FormatDisplayMethods(displayMethods);
                var formattedDisplayProperties = FormatDisplayProperties(displayProperties);

                var source =
$@"// <auto-generated/>
namespace {type.ContainingNamespace.ToDisplayString()};

public abstract class {className} : {@interface.Name}
{{
    private {@interface.Name} {targetFieldName};

    protected {className} ({@interface.Name} {targetFieldName}) {{
        this.{targetFieldName} = {targetFieldName};
    }}

{string.Join($"{Environment.NewLine}{Environment.NewLine}", formattedDisplayProperties)}

{string.Join($"{Environment.NewLine}{Environment.NewLine}", formattedDisplayMethods)}
}}
";

                return (source, className);
            });

            foreach (var (source, className) in outputs) {
                // Add the source code to the compilation
                context.AddSource($"{className}.generated.cs", SourceText.From(source, Encoding.UTF8, SourceHashAlgorithm.Sha256));
            }
        }

        private static IEnumerable<string> FormatDisplayProperties(IEnumerable<(string signature, string call, string Empty)> displayProperties) {
            return displayProperties.Select(property => $@"    {property.signature} {{ {property.call} }}");
        }

        private static IEnumerable<(string signature, string call, string Empty)> CreateDisplayProperties(string targetFieldName, IEnumerable<ISymbol> members) {
            var properties = members.Where(member => member is IPropertySymbol).Select(m => m as IPropertySymbol);
            var displayProperties = properties.Select(property => {
                var formattedAccessibility = property.DeclaredAccessibility.ToString().ToLower();
                var signature = $@"{formattedAccessibility} virtual {property.Type} {property.Name}";
                var call = $@"get => {targetFieldName}.{property.Name}; set => {targetFieldName}.{property.Name} = value;";

                return (signature, call, string.Empty);
            });
            return displayProperties;
        }

        private static IEnumerable<(string signature, string call, ITypeSymbol returnType)> CreateDisplayMethods(string targetFieldName, IEnumerable<ISymbol> members) {
            var methods = members.Where(member => member is IMethodSymbol && !((member as IMethodSymbol).AssociatedSymbol is IPropertySymbol)).Select(m => m as IMethodSymbol);

            var displayMethods = methods.Select(method => {
                var typeParametersStrings = method.TypeParameters.Select(t => t.ToDisplayString());
                var parametersStrings = method.Parameters.Select(p => $@"{p.Type} {p.Name}");
                var formattedAccessibility = (method.ReturnType.DeclaredAccessibility != Accessibility.NotApplicable ? method.ReturnType.DeclaredAccessibility : Accessibility.Public).ToString().ToLower();
                var signature = $@"{formattedAccessibility} virtual {method.ReturnType} {method.Name}{(method.IsGenericMethod ? $@"<{string.Join(", ", typeParametersStrings)}>" : string.Empty)}({string.Join(", ", parametersStrings)})";
                var callParameters = $@"{string.Join(", ", method.Parameters.Select(p => p.Name))}";

                var call = $@"{targetFieldName}.{method.Name}{(method.IsGenericMethod ? $@"<{string.Join(", ", typeParametersStrings)}>" : string.Empty)}({callParameters})";

                return (signature, call, returnType: method.ReturnType);
            });
            return displayMethods;
        }

        private static IEnumerable<string> FormatDisplayMethods(IEnumerable<(string signature, string call, ITypeSymbol returnType)> displayMethods) {
            return displayMethods.Select(method => {
                return
$@"    {method.signature} {{
        {(method.returnType.Name == "Void" ? string.Empty : "return")} {method.call};
    }}";
            });
        }

        /// <summary>
        /// Gets all Types inside the namespace matching the predicate including nested namespaces.
        /// </summary>
        /// <param name="input"></param>
        /// <param name="predicate"></param>
        /// <returns></returns>
        private IEnumerable<INamedTypeSymbol> GetAllTypes(INamespaceSymbol input, Func<INamedTypeSymbol, bool> predicate) {
            foreach (var space in input.GetNamespaceMembers()) {
                foreach (var item in space.GetTypeMembers()) {
                    if (predicate(item)) {
                        yield return item;
                    }
                }

                foreach (var nestedItem in GetAllTypes(space, predicate)) {
                    yield return nestedItem;
                }
            }
        }

        /// <summary>
        /// Gets all Types in the namespace decorated with the <see cref="DecorateAttribute"/> including nested namespaces.
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        private IEnumerable<INamedTypeSymbol> GetAllDecoratedTypes(INamespaceSymbol input) {
            return GetAllTypes(input, (x) => x.GetAttributes().Any(att => att.AttributeClass.Name == nameof(DecorateAttribute)));
        }

        public void Initialize(GeneratorInitializationContext context) {
            // No initialization required for this one
        }
    }
}